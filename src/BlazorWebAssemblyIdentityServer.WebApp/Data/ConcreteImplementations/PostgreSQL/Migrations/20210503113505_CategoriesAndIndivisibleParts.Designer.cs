// <auto-generated />
using System;
using BlazorWebAssemblyIdentityServer.WebApp.Data.ConcreteImplementations.PostgreSQL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace BlazorWebAssemblyIdentityServer.WebApp.Data.ConcreteImplementations.PostgreSQL.Migrations
{
    [DbContext(typeof(NpgsqlApplicationDbContext))]
    [Migration("20210503113505_CategoriesAndIndivisibleParts")]
    partial class CategoriesAndIndivisibleParts
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("BlazorWebAssemblyIdentityServer.WebApp.Models.Identity.ApplicationRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ConcurrencyStamp = "0156e0ac-38e2-463f-8afa-67bc3a8db786",
                            Name = "Administrators",
                            NormalizedName = "ADMINISTRATORS"
                        },
                        new
                        {
                            Id = 2L,
                            ConcurrencyStamp = "88476e44-e979-4bd1-9d0a-efd222525f7f",
                            Name = "Supervisors",
                            NormalizedName = "SUPERVISORS"
                        },
                        new
                        {
                            Id = 3L,
                            ConcurrencyStamp = "67e2f22b-a902-4dc9-be1c-f172d5cbcc6a",
                            Name = "Leaders",
                            NormalizedName = "LEADERS"
                        },
                        new
                        {
                            Id = 4L,
                            ConcurrencyStamp = "f543cc9c-1830-4a60-87fe-0972e2c6004a",
                            Name = "Limited",
                            NormalizedName = "LIMITED"
                        },
                        new
                        {
                            Id = 5L,
                            ConcurrencyStamp = "6199fd85-d01a-4bd7-9b43-83882c4868dd",
                            Name = "Banned",
                            NormalizedName = "BANNED"
                        });
                });

            modelBuilder.Entity("BlazorWebAssemblyIdentityServer.WebApp.Models.Identity.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("BlazorWebAssemblyIdentityServer.WebApp.Models.Identity.ApplicationUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("BlazorWebAssemblyIdentityServer.WebApp.Models.Identity.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("BlazorWebAssemblyIdentityServer.WebApp.Models.Identity.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("BlazorWebAssemblyIdentityServer.WebApp.Models.Identity.ApplicationUserRole", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("BlazorWebAssemblyIdentityServer.WebApp.Models.Identity.ApplicationUserToken", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BlazorWebAssemblyIdentityServer.WebApp.Models.OwnedAssets.AssetIndivisiblePart", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("LastChangedAt")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LastChangedByUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("OwnedAssetId")
                        .HasColumnType("bigint");

                    b.Property<double>("PartSize")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("LastChangedByUserId");

                    b.HasIndex("OwnedAssetId");

                    b.ToTable("AssetIndivisibleParts");
                });

            modelBuilder.Entity("BlazorWebAssemblyIdentityServer.WebApp.Models.OwnedAssets.AssetIndivisiblePartCategoryAssociation", b =>
                {
                    b.Property<long>("AssetIndivisiblePartId")
                        .HasColumnType("bigint");

                    b.Property<long>("AssetPartCategoryId")
                        .HasColumnType("bigint");

                    b.HasKey("AssetIndivisiblePartId", "AssetPartCategoryId");

                    b.HasIndex("AssetPartCategoryId");

                    b.ToTable("AssetPartCategoryAssociations");
                });

            modelBuilder.Entity("BlazorWebAssemblyIdentityServer.WebApp.Models.OwnedAssets.AssetPartCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("LastChangedAt")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LastChangedByUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LastChangedByUserId");

                    b.ToTable("AssetPartCategories");
                });

            modelBuilder.Entity("BlazorWebAssemblyIdentityServer.WebApp.Models.OwnedAssets.OwnedAsset", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("IndivisibleCommonPart")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("LastChangedAt")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LastChangedByUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LastChangedByUserId");

                    b.ToTable("OwnedAssets");
                });

            modelBuilder.Entity("BlazorWebAssemblyIdentityServer.WebApp.Models.Identity.ApplicationRoleClaim", b =>
                {
                    b.HasOne("BlazorWebAssemblyIdentityServer.WebApp.Models.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BlazorWebAssemblyIdentityServer.WebApp.Models.Identity.ApplicationUserClaim", b =>
                {
                    b.HasOne("BlazorWebAssemblyIdentityServer.WebApp.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BlazorWebAssemblyIdentityServer.WebApp.Models.Identity.ApplicationUserLogin", b =>
                {
                    b.HasOne("BlazorWebAssemblyIdentityServer.WebApp.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BlazorWebAssemblyIdentityServer.WebApp.Models.Identity.ApplicationUserRole", b =>
                {
                    b.HasOne("BlazorWebAssemblyIdentityServer.WebApp.Models.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorWebAssemblyIdentityServer.WebApp.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BlazorWebAssemblyIdentityServer.WebApp.Models.Identity.ApplicationUserToken", b =>
                {
                    b.HasOne("BlazorWebAssemblyIdentityServer.WebApp.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BlazorWebAssemblyIdentityServer.WebApp.Models.OwnedAssets.AssetIndivisiblePart", b =>
                {
                    b.HasOne("BlazorWebAssemblyIdentityServer.WebApp.Models.Identity.ApplicationUser", "LastChangedByUser")
                        .WithMany()
                        .HasForeignKey("LastChangedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorWebAssemblyIdentityServer.WebApp.Models.OwnedAssets.OwnedAsset", "OwnedAsset")
                        .WithMany()
                        .HasForeignKey("OwnedAssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LastChangedByUser");

                    b.Navigation("OwnedAsset");
                });

            modelBuilder.Entity("BlazorWebAssemblyIdentityServer.WebApp.Models.OwnedAssets.AssetIndivisiblePartCategoryAssociation", b =>
                {
                    b.HasOne("BlazorWebAssemblyIdentityServer.WebApp.Models.OwnedAssets.AssetIndivisiblePart", "AssetIndivisiblePart")
                        .WithMany("CategoryAssociations")
                        .HasForeignKey("AssetIndivisiblePartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorWebAssemblyIdentityServer.WebApp.Models.OwnedAssets.AssetPartCategory", "AssetPartCategory")
                        .WithMany("PartAssociations")
                        .HasForeignKey("AssetPartCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssetIndivisiblePart");

                    b.Navigation("AssetPartCategory");
                });

            modelBuilder.Entity("BlazorWebAssemblyIdentityServer.WebApp.Models.OwnedAssets.AssetPartCategory", b =>
                {
                    b.HasOne("BlazorWebAssemblyIdentityServer.WebApp.Models.Identity.ApplicationUser", "LastChangedByUser")
                        .WithMany()
                        .HasForeignKey("LastChangedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LastChangedByUser");
                });

            modelBuilder.Entity("BlazorWebAssemblyIdentityServer.WebApp.Models.OwnedAssets.OwnedAsset", b =>
                {
                    b.HasOne("BlazorWebAssemblyIdentityServer.WebApp.Models.Identity.ApplicationUser", "LastChangedByUser")
                        .WithMany()
                        .HasForeignKey("LastChangedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LastChangedByUser");
                });

            modelBuilder.Entity("BlazorWebAssemblyIdentityServer.WebApp.Models.OwnedAssets.AssetIndivisiblePart", b =>
                {
                    b.Navigation("CategoryAssociations");
                });

            modelBuilder.Entity("BlazorWebAssemblyIdentityServer.WebApp.Models.OwnedAssets.AssetPartCategory", b =>
                {
                    b.Navigation("PartAssociations");
                });
#pragma warning restore 612, 618
        }
    }
}
