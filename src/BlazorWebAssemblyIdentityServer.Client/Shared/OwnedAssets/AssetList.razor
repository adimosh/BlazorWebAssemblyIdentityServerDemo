@using BlazorWebAssemblyIdentityServer.Client.Extensions
@using Flurl
@inject HttpClient _client;
@inject NavigationManager _navigation;
@inject NotificationService _notifications;

<h3>Assets</h3>

<RadzenGrid @ref="_assetsGrid" TItem="OwnedAssetDTO" Data="@_data" Count="@_count" AllowFiltering="true" AllowPaging="true" PageSize="5"
            AllowSorting="true" EditMode="DataGridEditMode.Single" LoadData="LoadData"
            RowUpdate="OnUpdateRow">
    <Columns>
        <RadzenGridColumn TItem="OwnedAssetDTO" Property="@nameof(OwnedAssetDTO.Id)" Filterable="false" Sortable="false">
            <FooterTemplate>
                <RadzenButton @ref="_addButton" Icon="add_circle_outline" Text="" Click="@InsertRow" />
            </FooterTemplate>
        </RadzenGridColumn>
        <RadzenGridColumn TItem="OwnedAssetDTO" Property="@nameof(OwnedAssetDTO.Id)" Title="Asset name">
            <EditTemplate Context="asset">
                <RadzenTextBox @bind-Value="asset.Name"/>
            </EditTemplate>
        </RadzenGridColumn>
        <RadzenGridColumn TItem="OwnedAssetDTO" Property="IndivisibleCommonPart" Title="Indivisible common part">
            <EditTemplate Context="asset">
                <RadzenNumeric @bind-Value="asset.IndivisibleCommonPart" Step="0.01" Placeholder="0.00" Min="0"/>
            </EditTemplate>
        </RadzenGridColumn>
        <RadzenGridColumn TItem="OwnedAssetDTO" Context="sampleBlazorModelsSampleOrder" Bubble="false" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="100px">
            <Template Context="order">
                <RadzenButton Icon="edit" Size="ButtonSize.Small" Click="@(args => EditRow(order))">
                </RadzenButton>
            </Template>
            <EditTemplate Context="order">
                <RadzenButton Icon="save" Size="ButtonSize.Small" Click="@((args) => SaveRow(order))">
                </RadzenButton>
                <RadzenButton Icon="cancel" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Secondary" Click="@((args) => CancelEdit(order))">
                </RadzenButton>
            </EditTemplate>
        </RadzenGridColumn>
        <RadzenGridColumn TItem="OwnedAssetDTO" Context="order" Bubble="false" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="70px">
            <Template Context="order">
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" Click="@(async args => await DeleteRow(order))" />
                
            </Template>
            <EditTemplate Context="order">
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" Click="@(async args => await DeleteRow(order))" />
            </EditTemplate>
        </RadzenGridColumn>
    </Columns>
</RadzenGrid>

@code {

    [CascadingParameter(Name = "OfflineMode")] bool OfflineMode { get; set; }

    RadzenGrid<OwnedAssetDTO> _assetsGrid;
    RadzenButton _addButton;

    List<OwnedAssetDTO> _data;
    int _count;
    bool _adding;

    async Task LoadData(LoadDataArgs args)
    {
        _addButton.Disabled = true;
        try
        {
            if (_adding)
            {
                _adding = false;
                _data.Add(new OwnedAssetDTO());
                _count++;
                await _assetsGrid.EditRow(_data.Last());
            }
            else
            {
                if (OfflineMode)
                {
                    if (_data == null)
                    {
                        _data = new List<OwnedAssetDTO>
                    {
                        new OwnedAssetDTO()
                        {
                            Id = 1,
                            IndivisibleCommonPart = 0.5,
                            Name = "aaa"
                        },
                        new OwnedAssetDTO()
                        {
                            Id = 2,
                            IndivisibleCommonPart = 0.7,
                            Name = "bbb"
                        }
                    };
                        _count = _data.Count;
                    }
                }
                else
                {
                    var response = await _client.GetAsync(args.AttachToUrl("OwnedAssets"), HttpCompletionOption.ResponseHeadersRead);

                    var result = response.InterpretStatusReturn(_navigation, _notifications);

                    if (result)
                    {
                        var responseBody = await response.Content.ReadFromJsonAsync<(int Count, OwnedAssetDTO[] Data)>();
                        _data = responseBody.Data?.ToList() ?? new List<OwnedAssetDTO>();
                        _count = responseBody.Count;
                    }
                    else
                    {
                        _data = new List<OwnedAssetDTO>();
                        _count = 0;
                    }
                }
            }
        }
        finally
        {
            _addButton.Disabled = false;
        }
    }

    void InsertRow(MouseEventArgs e)
    {
        _adding = true;
        _assetsGrid.Reload();
    }

    void EditRow(OwnedAssetDTO asset)
    {
        _assetsGrid.EditRow(asset);
    }

    void SaveRow(OwnedAssetDTO asset)
    {
        _assetsGrid.UpdateRow(asset);
    }

    async ValueTask DeleteRow(OwnedAssetDTO asset)
    {
        if (_data.Contains(asset))
        {
            if (OfflineMode)
            {
                _data.Remove(asset);
            }
            else
            {
                _addButton.Disabled = true;
                try
                {
                    if (asset.Id != default)
                    {
                        var response = await _client.DeleteAsync(Url.Combine("OwnedAssets", asset.Id.ToString()));

                        _ = response.InterpretStatusReturn(_navigation, _notifications);
                    }
                }
                finally
                {
                    _addButton.Disabled = false;
                }


                await _assetsGrid.Reload();
            }
        }
        else
        {
            _assetsGrid.CancelEditRow(asset);
        }
    }

    void CancelEdit(OwnedAssetDTO order)
    {
        _assetsGrid.CancelEditRow(order);
    }

    async Task OnUpdateRow(OwnedAssetDTO asset)
    {
        _addButton.Disabled = true;
        try
        {
            if (asset.Id != default)
            {
                if (OfflineMode)
                {
                    var idx = _data.FindIndex(p => p.Id == asset.Id);
                    _data[idx] = asset;
                }
                else
                {
                    var response = await _client.PutAsync(Url.Combine("OwnedAssets", asset.Id.ToString()), JsonContent.Create(asset));

                    _ = response.InterpretStatusReturn(_navigation, _notifications);
                }
            }
            else
            {
                if (OfflineMode)
                {
                    asset.Id = _data.Max(p => p.Id) + 1;
                    if (!_data.Contains(asset))
                    {
                        _data.Add(asset);
                    }
                }
                else
                {
                    var response = await _client.PostAsync("OwnedAssets", JsonContent.Create(asset));

                    _ = response.InterpretStatusReturn(_navigation, _notifications);
                }
            }
        }
        finally
        {
            _addButton.Disabled = false;
        }

        await _assetsGrid.Reload();
    }
}