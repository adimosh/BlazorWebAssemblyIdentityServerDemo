@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Security.Claims

@inject NavigationManager _navigation
@inject SignOutSessionStateManager _signOutManager

<AuthorizeView>
    <Authorized>
        <RadzenButton Icon="logout" Click="BeginSignOut">
            @if (context.User.Claims.Any(p => p.Type == ClaimTypes.Email))
            {
                <RadzenGravatar Email="@(context.User.Claims.First(p => p.Type == ClaimTypes.Email).Value)" />
            }@(context.User.Identity?.Name ?? "unknown") (log out)
            </RadzenButton>
    </Authorized>
    <NotAuthorized>
        <RadzenButton Icon="login" Text="Log in" Click="@(() => _navigation.NavigateTo("authentication/login", true))" />
    </NotAuthorized>
</AuthorizeView>

@code{
    private async Task BeginSignOut(MouseEventArgs args)
    {
        await _signOutManager.SetSignOutState();
        _navigation.NavigateTo("authentication/logout");
    }
}
